---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluentd
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - namespaces
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: fluentd
roleRef:
  kind: ClusterRole
  name: fluentd
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: fluentd
    namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: kube-system
  name: fluentd-config
data:
  fluent.conf: |
    <source>
      @type tail
      path /var/log/containers/*.log
      exclude_path ["/var/log/containers/fluentd-*.log"]
      pos_file /var/log/fluentd-containers.log.pos
      tag kubernetes.**
      read_from_head true
      <parse>
        @type regexp
        expression /(?<log>\{.*\})$/
      </parse>
    </source>

    <filter kubernetes.**>
      @type kubernetes_metadata
    </filter>

    <filter kubernetes.**>
      @type grep
      regexp1 $.kubernetes.labels.fluentd_logger true
    </filter>

    <filter kubernetes.**>
      @type parser
      key_name log
      reserve_data true
      hash_value_field log
      <parse>
        @type json
      </parse>
    </filter>

    <filter kubernetes.**>
      @type record_transformer
      enable_ruby
      <record>
        LogLevel ${record.dig("log", "level")}
        message ${record.dig("log","message")}

        service ${record.dig("log","appName")}
        namespace ${record.dig("log","namespace")}
        requestId ${record.dig("log", "contextId")}
        timestamp ${record.dig("log","timestamp")}
        
        traceparent ${record.dig("log","traceparent")}
        traceId ${record.dig("log","trace_id")}
        spanId ${record.dig("log","span_id")}
        traceFlags ${record.dig("log","trace_flags")}
        
        duration ${record.dig("log","duration")}
        # timestamp ${(Time.parse(record["log"]["timestamp"]).utc.to_i).to_s}
      </record>
    </filter>
    <match kubernetes.**>
      @type copy

      <store>
        @type http
        endpoint https://events.baselime.io/v1/logs
        headers {"x-api-key":"YOUR_API_KEY", "baselime-data-source": "fluentd"}
        open_timeout 2
        json_array true
        <format>
          @type json
        </format>
        <buffer>
          flush_interval 5s
        </buffer>
      </store>

      <store>
        @type stdout
      </store>
    </match>

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd
  namespace: kube-system
  labels:
    k8s-app: fluentd-logging
    version: v1
spec:
  selector:
    matchLabels:
      k8s-app: fluentd-logging
      version: v1
  template:
    metadata:
      labels:
        k8s-app: fluentd-logging
        version: v1
    spec:
      serviceAccount: fluentd
      serviceAccountName: fluentd
      containers:
        - name: logger
          image: fluent/fluentd-kubernetes-daemonset:v1.11.5-debian-elasticsearch7-1.1
          env:
            - name: FLUENTD_ARGS
              value: -c /fluentd/etc/fluent.conf
          volumeMounts:
            - mountPath: /fluentd/etc
              name: config-volume
            - name: varlog
              mountPath: /var/log
            - name: dockercontainerlogdirectory
              mountPath: /var/lib/docker/containers
              readOnly: true
      volumes:
        - name: varlog
          hostPath:
            path: /var/log
        - name: config-volume
          configMap:
            name: fluentd-config
            items:
              - key: fluent.conf
                path: fluent.conf
        # - name: dockercontainerlogdirectory
        #   hostPath:
        #     path: /var/lib/docker/containers
        - name: dockercontainerlogdirectory
          hostPath:
            path: /var/log/pods
