---
# When ConfigMap changes we must rollout pods:
# kubectl rollout restart deploy/<name>
apiVersion: v1
kind: ConfigMap
metadata:
  name: common-marco-polo-config
data:
  PORT: "3000"
  NODE_ENV: "staging"
  LOG_LEVEL: "debug"
  LOG_FORMAT: "json"
  MARCO_URL: "http://marco-service:3000/api/marco"
  POLO_URL: "http://polo-service:3000/api/polo"
  ENABLE_OTEL: "true"
  BASE_URL_OTEL_COLLECTOR: "http://otel-collector-opentelemetry-collector.default:4317"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: marco
  labels:
    fluentd.logger: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: marco
  template:
    metadata:
      labels:
        app: marco
        fluentd.logger: "true"
    spec:
      terminationGracePeriodSeconds: 60
      automountServiceAccountToken: false
      containers:
        - name: marco-app
          image: gm50x/marco
          imagePullPolicy: Always
          resources:
            requests:
              memory: "100Mi"
              cpu: "10m"
            limits:
              memory: "256Mi"
              cpu: "50m"
          envFrom:
            - configMapRef:
                name: "common-marco-polo-config"
          env:
            - name: SERVICE_NAME
              value: "marco"
            - name: ROUTE_PREFIX
              value: "api/marco"
            - name: AMQP_URL
              valueFrom:
                secretKeyRef:
                  name: "rabbitmq"
                  key: "AMQP_URL"
          ports:
            - containerPort: 3000
          livenessProbe:
            initialDelaySeconds: 10
            failureThreshold: 3
            periodSeconds: 15
            httpGet:
              path: /api/marco/healthz
              port: 3000
              httpHeaders:
                - name: X-My-Header
                  value: all-good
          readinessProbe:
            initialDelaySeconds: 15
            periodSeconds: 10
            tcpSocket:
              port: 3000
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: marco-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: marco
  minReplicas: 1
  maxReplicas: 5
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 300
---
apiVersion: v1
kind: Service
metadata:
  name: marco-service
spec:
  type: ClusterIP
  selector:
    app: marco
  ports:
    - name: marco-http
      protocol: TCP
      port: 3000
      targetPort: 3000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: marco-srv-ingress
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
    - http:
        paths:
          - path: "/api/marco"
            pathType: Prefix
            backend:
              service:
                name: marco-service
                port:
                  number: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: polo
  labels:
    fluentd.logger: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: polo
  template:
    metadata:
      labels:
        app: polo
        fluentd.logger: "true"
    spec:
      terminationGracePeriodSeconds: 60
      automountServiceAccountToken: false
      containers:
        - name: polo-app
          image: gm50x/polo
          imagePullPolicy: Always
          resources:
            requests:
              memory: "100Mi"
              cpu: "10m"
            limits:
              memory: "256Mi"
              cpu: "50m"
          envFrom:
            - configMapRef:
                name: "common-marco-polo-config"
          env:
            - name: SERVICE_NAME
              value: "polo"
            - name: ROUTE_PREFIX
              value: "api/polo"
            - name: AMQP_URL
              valueFrom:
                secretKeyRef:
                  name: "rabbitmq"
                  key: "AMQP_URL"
          ports:
            - containerPort: 3000
          livenessProbe:
            initialDelaySeconds: 10
            failureThreshold: 3
            periodSeconds: 15
            httpGet:
              path: /api/polo/healthz
              port: 3000
              httpHeaders:
                - name: X-My-Header
                  value: all-good
          readinessProbe:
            initialDelaySeconds: 15
            periodSeconds: 10
            tcpSocket:
              port: 3000
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: polo-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: polo
  minReplicas: 1
  maxReplicas: 5
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
---
apiVersion: v1
kind: Service
metadata:
  name: polo-service
spec:
  type: ClusterIP
  selector:
    app: polo
  ports:
    - name: polo-http
      protocol: TCP
      port: 3000
      targetPort: 3000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: polo-srv-ingress
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
    - http:
        paths:
          - path: "/api/polo"
            pathType: Prefix
            backend:
              service:
                name: polo-service
                port:
                  number: 3000
